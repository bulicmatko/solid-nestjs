generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  emails    AccountEmail[]
  passwords AccountPassword[]

  profile AccountProfile?

  activities AccountActivity[]

  @@map("account")
}

model AccountEmail {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  accountId String  @unique @map("account_id") @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])

  createdAt   DateTime  @default(now()) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @default(now()) @updatedAt @map("updated_at") @db.Timestamptz
  confirmedAt DateTime? @map("confirmed_at") @db.Timestamptz

  primary Boolean @db.Boolean
  email   String  @unique @db.VarChar

  confirmationRequests AccountEmailConfirmationRequest[]

  @@map("account_email")
}

model AccountEmailConfirmationRequest {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  emailId String       @unique @map("email_id") @db.Uuid
  email   AccountEmail @relation(fields: [emailId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  confirmationCode String @unique @default(dbgenerated("gen_random_uuid()")) @map("confirmation_code") @db.Uuid

  @@map("account_email_confirmation_request")
}

model AccountPassword {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  accountId String  @unique @map("account_id") @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])

  createdAt DateTime  @default(now()) @map("created_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  password String @db.VarChar

  resetRequests AccountPasswordResetRequest[]

  @@map("account_password")
}

model AccountPasswordResetRequest {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  passwordId String          @unique @map("password_id") @db.Uuid
  password   AccountPassword @relation(fields: [passwordId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  resetCode String @unique @default(dbgenerated("gen_random_uuid()")) @map("reset_code") @db.Uuid

  @@map("account_password_reset_request")
}

model AccountProfile {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  accountId String  @unique @map("account_id") @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at") @db.Timestamptz

  firstName String @map("first_name") @db.VarChar
  lastName  String @map("last_name") @db.VarChar

  @@map("account_profile")
}

model AccountActivity {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  accountId String  @map("account_id") @db.Uuid
  account   Account @relation(fields: [accountId], references: [id])

  createdAt DateTime @default(now()) @map("created_at") @db.Timestamptz

  action  String  @db.VarChar
  subject String? @db.VarChar
  meta    Json?   @db.Json

  @@map("account_activity")
}

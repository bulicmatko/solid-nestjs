generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt   DateTime  @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz
  updatedAt   DateTime  @default(dbgenerated("now()")) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt   DateTime? @map("deleted_at") @db.Timestamptz
  confirmedAt DateTime? @map("confirmed_at") @db.Timestamptz

  userId   String? @map("user_id") @db.Uuid
  manager  User?   @relation("user_to_user", fields: [userId], references: [id])
  subUsers User[]  @relation("user_to_user")

  email    String @unique @db.VarChar
  password String @db.VarChar

  profile                  Profile?
  emailConfirmationRequest EmailConfirmationRequest?
  passwordResetRequest     PasswordResetRequest?

  permissions Permission[]
  activities  Activity[]
  companies   Company[]

  @@map("user")
}

model Profile {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(dbgenerated("now()")) @updatedAt @map("updated_at") @db.Timestamptz

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  firstName String @map("first_name") @db.VarChar
  lastName  String @map("last_name") @db.VarChar

  @@map("profile")
}

model EmailConfirmationRequest {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(dbgenerated("now()")) @updatedAt @map("updated_at") @db.Timestamptz
  expiresAt DateTime @map("expires_at") @db.Timestamptz

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  code String @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  @@map("email_confirmation_request")
}

model PasswordResetRequest {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(dbgenerated("now()")) @updatedAt @map("updated_at") @db.Timestamptz
  expiresAt DateTime @map("expires_at") @db.Timestamptz

  userId String @unique @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  code String @unique @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  @@map("password_reset_request")
}

model Permission {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz
  updatedAt DateTime @default(dbgenerated("now()")) @updatedAt @map("updated_at") @db.Timestamptz

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  key        String    @db.VarChar
  activeFrom DateTime? @map("active_from") @db.Timestamptz
  activeTo   DateTime? @map("active_to") @db.Timestamptz
  note       String?   @db.VarChar

  @@unique([userId, key])
  @@map("permission")
}

model Activity {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  action  String  @db.VarChar
  subject String? @db.VarChar
  meta    Json?   @db.Json

  @@map("activity")
}

model Company {
  id String @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid

  createdAt DateTime  @default(dbgenerated("now()")) @map("created_at") @db.Timestamptz
  updatedAt DateTime  @default(dbgenerated("now()")) @updatedAt @map("updated_at") @db.Timestamptz
  deletedAt DateTime? @map("deleted_at") @db.Timestamptz

  userId String @map("user_id") @db.Uuid
  user   User   @relation(fields: [userId], references: [id])

  name String @unique @db.VarChar

  @@map("company")
}
